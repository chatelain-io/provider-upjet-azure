// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoutingPolicyInitParameters struct {

	// A list of destinations which this routing policy is applicable to. Possible values are Internet and PrivateTraffic.
	Destinations []*string `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// The unique name for the routing policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The resource ID of the next hop on which this routing policy is applicable to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta2.Firewall
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`

	// Reference to a Firewall in network to populate nextHop.
	// +kubebuilder:validation:Optional
	NextHopRef *v1.Reference `json:"nextHopRef,omitempty" tf:"-"`

	// Selector for a Firewall in network to populate nextHop.
	// +kubebuilder:validation:Optional
	NextHopSelector *v1.Selector `json:"nextHopSelector,omitempty" tf:"-"`
}

type RoutingPolicyObservation struct {

	// A list of destinations which this routing policy is applicable to. Possible values are Internet and PrivateTraffic.
	Destinations []*string `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// The unique name for the routing policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The resource ID of the next hop on which this routing policy is applicable to.
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`
}

type RoutingPolicyParameters struct {

	// A list of destinations which this routing policy is applicable to. Possible values are Internet and PrivateTraffic.
	// +kubebuilder:validation:Optional
	Destinations []*string `json:"destinations" tf:"destinations,omitempty"`

	// The unique name for the routing policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The resource ID of the next hop on which this routing policy is applicable to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta2.Firewall
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`

	// Reference to a Firewall in network to populate nextHop.
	// +kubebuilder:validation:Optional
	NextHopRef *v1.Reference `json:"nextHopRef,omitempty" tf:"-"`

	// Selector for a Firewall in network to populate nextHop.
	// +kubebuilder:validation:Optional
	NextHopSelector *v1.Selector `json:"nextHopSelector,omitempty" tf:"-"`
}

type VirtualHubRoutingIntentInitParameters struct {

	// One or more routing_policy blocks as defined below.
	RoutingPolicy []RoutingPolicyInitParameters `json:"routingPolicy,omitempty" tf:"routing_policy,omitempty"`
}

type VirtualHubRoutingIntentObservation struct {

	// The ID of the Virtual Hub Routing Intent.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// One or more routing_policy blocks as defined below.
	RoutingPolicy []RoutingPolicyObservation `json:"routingPolicy,omitempty" tf:"routing_policy,omitempty"`

	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	VirtualHubID *string `json:"virtualHubId,omitempty" tf:"virtual_hub_id,omitempty"`
}

type VirtualHubRoutingIntentParameters struct {

	// One or more routing_policy blocks as defined below.
	// +kubebuilder:validation:Optional
	RoutingPolicy []RoutingPolicyParameters `json:"routingPolicy,omitempty" tf:"routing_policy,omitempty"`

	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.VirtualHub
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VirtualHubID *string `json:"virtualHubId,omitempty" tf:"virtual_hub_id,omitempty"`

	// Reference to a VirtualHub in network to populate virtualHubId.
	// +kubebuilder:validation:Optional
	VirtualHubIDRef *v1.Reference `json:"virtualHubIdRef,omitempty" tf:"-"`

	// Selector for a VirtualHub in network to populate virtualHubId.
	// +kubebuilder:validation:Optional
	VirtualHubIDSelector *v1.Selector `json:"virtualHubIdSelector,omitempty" tf:"-"`
}

// VirtualHubRoutingIntentSpec defines the desired state of VirtualHubRoutingIntent
type VirtualHubRoutingIntentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualHubRoutingIntentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VirtualHubRoutingIntentInitParameters `json:"initProvider,omitempty"`
}

// VirtualHubRoutingIntentStatus defines the observed state of VirtualHubRoutingIntent.
type VirtualHubRoutingIntentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualHubRoutingIntentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VirtualHubRoutingIntent is the Schema for the VirtualHubRoutingIntents API. Manages a Virtual Hub Routing Intent.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualHubRoutingIntent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routingPolicy) || (has(self.initProvider) && has(self.initProvider.routingPolicy))",message="spec.forProvider.routingPolicy is a required parameter"
	Spec   VirtualHubRoutingIntentSpec   `json:"spec"`
	Status VirtualHubRoutingIntentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualHubRoutingIntentList contains a list of VirtualHubRoutingIntents
type VirtualHubRoutingIntentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualHubRoutingIntent `json:"items"`
}

// Repository type metadata.
var (
	VirtualHubRoutingIntent_Kind             = "VirtualHubRoutingIntent"
	VirtualHubRoutingIntent_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualHubRoutingIntent_Kind}.String()
	VirtualHubRoutingIntent_KindAPIVersion   = VirtualHubRoutingIntent_Kind + "." + CRDGroupVersion.String()
	VirtualHubRoutingIntent_GroupVersionKind = CRDGroupVersion.WithKind(VirtualHubRoutingIntent_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualHubRoutingIntent{}, &VirtualHubRoutingIntentList{})
}
